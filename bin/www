#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('64squares:server');
var server = require('http').Server(app);
var io = require('socket.io')(server);
var mSocket = require('../modules/m.socket');
var match = require('../modules/m.match');
var auth = require('../modules/m.auth');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
mSocket.io = io;
mSocket.sockets= io.sockets;
io.sockets.on('connection', function (socket) {
  socket.on('join', function (room,token,game) {
    // autentication

    auth.getIdFromToken(token, function (err, data) {
     if(!err){
        auth.verifySession(data.data, function (err, udata) {
          if (!err)  { 
            match.leaveRoom(room,udata.userid,game,function(err,rdata){
              if(rdata!=null){
                for(let i=0; i < rdata.length;i++){
  
                  socket.leave(rdata[i]);
                }
              }
              
            });           
          }
        })
        socket.join(room);
     
      }
      
    });
    //end of authentication
   
    
    
    
    

  });
  socket.on('disconnect', function () {
    // delete pool and make lose payer if inside game
    match.deletePool(socket.id);

  });
  // socket.emit('news', { hello: 'world' });
 
});
console.log('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
     +
     0
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
